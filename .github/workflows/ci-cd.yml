name: PayMyBuddy CI/CD Pipeline

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ main ]

env:
  # Configuration de base
  DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/paymybuddy
  MYSQL_DATABASE: ${{ secrets.DB_NAME }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  # Tests et analyses pour tous les commits
  test-and-analyze:
    name: Test & Analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Configuration de Docker Buildx pour des builds multi-architectures
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Création d'un réseau Docker pour les tests
      - name: Create Docker network
        run: docker network create paymybuddy-test-network

      # Démarrage d'un conteneur MySQL pour les tests
      - name: Start MySQL Container
        run: |
          docker run -d --name mysql-test \
            --network paymybuddy-test-network \
            -e MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} \
            -e MYSQL_DATABASE=${MYSQL_DATABASE} \
            mysql:8.0 \
            --character-set-server=utf8mb4 \
            --collation-server=utf8mb4_unicode_ci
          
          echo "Waiting for MySQL to be ready..."
          timeout=60
          until docker exec mysql-test mysqladmin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD} --silent || [ $timeout -le 0 ]; do
            sleep 1
            ((timeout--))
          done

      # Construction de l'image de test
      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.test
          push: false
          load: true
          tags: paymybuddy-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Exécution de tous les tests (unitaires + intégration)
      - name: Run Tests
        run: |
          docker run --rm \
            --network paymybuddy-test-network \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql-test:3306/${MYSQL_DATABASE} \
            -e SPRING_DATASOURCE_USERNAME=root \
            -e SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD} \
            -e DB_HOST=mysql-test \
            -v ${{ github.workspace }}/target:/app/target \
            paymybuddy-test:latest \
            mvn verify

      # Génération des rapports
      - name: Generate Reports
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/target:/app/target \
            paymybuddy-test:latest \
            mvn jacoco:report javadoc:javadoc

      # Téléchargement des rapports en tant qu'artefacts
      - name: Upload Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: code-reports
          path: |
            target/site/jacoco/
            target/reports/apidocs/

      # Construction de l'image de production pour le scan
      - name: Build Production Image for Scan
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: paymybuddy-test-security:latest

      # Scan de sécurité
      - name: Run Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: paymybuddy-test-security:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      # Publication des résultats de sécurité
      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Publication de l'image et déploiement des rapports (uniquement pour main)
  publish-and-deploy:
    name: Publish & Deploy
    runs-on: ubuntu-latest
    needs: test-and-analyze
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Configuration de Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configuration des accès Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Construction et publication de l'image vers Docker Hub
      - name: Build and Push Production Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REPO }}:latest
            ${{ env.DOCKER_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Téléchargement des rapports depuis le job precedent
      - name: Download Code Reports
        uses: actions/download-artifact@v4
        with:
          name: code-reports
          path: downloaded-reports

      # Mise en place des rapports dans le dossier target/site
      - name: Prepare site directory
        run: |
          mkdir -p ./target/site/jacoco
          mkdir -p ./target/site/apidocs
          cp -r downloaded-reports/site/jacoco/* ./target/site/jacoco/ || true
          cp -r downloaded-reports/reports/apidocs/* ./target/site/apidocs/ || true

      # Déploiement des rapports vers GitHub Pages
      - name: Deploy reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/site